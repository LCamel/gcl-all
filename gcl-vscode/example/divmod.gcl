con A, B : Int { A ≥ 0 ∧ B > 0 }
var q, b, r : Int

{: PowOf2 b = ⟨ ∃ k : 0 ≤ k : b = B * 2^k ⟩ :}

b := B
{ PowOf2 b, bnd: A - b }
do b ≤ A -> b := b * 2 od
{ PowOf2 b  ∧  b > A }

q, r := 0, A
{ A = q * b + r  ∧  PowOf2 b  ∧  0 ≤ r < b, bnd: b }
do b ≠ B -> 
   q, b := q * 2, b / 2
   { A = q * b + r  ∧  PowOf2 b ∧  0 ≤ r < b * 2 }
   if r < b -> skip
    | r ≥ b -> q, r := q + 1, r - b
   fi
od
{ A = q * B + r  ∧  0 ≤ r < B }
