con X : Int
con N : Int { X > 0 }
var x, y, k : Int

y, k := 1, 0
{ y = 2^k  ∧  0 ≤ k, bnd: N - y^2 }
do y^2 ≤ N -> y, k := y * 2, k + 1
od
{ y = 2^k  ∧  0 ≤ k  ∧ y^2 > N }

x := 0
{ x^2 ≤ N  ∧  (x + y)^2 > N  ∧  y = 2^k  ∧  0 ≤ k, bnd: k }
do y ≠ 1 -> if (x + y/2)^2 ≤ N -> x, y, k := x + y/2, y/2, k-1
             | (x + y/2)^2 > N ->    y, k := y/2, k-1
            fi
od
{ x^2 ≤ N  ∧  (x + 1)^2 > N }
