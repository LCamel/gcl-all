# modified from https://github.com/simonmichael/hledger/blob/master/.github/workflows/release.yml

# Creates a draft github release.
# See https://github.com/actions/create-release, still pretty rough as of 20200609.
# see also: https://github.com/marketplace/actions/tag-release-on-push-action

name: Release

# https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions#onpushpull_requestbranchestags
on:
  push:
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

jobs:
  release:
    name: Create Github Release
    if: contains(github.ref, 'tags/v')
    runs-on: ubuntu-latest
    steps:
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1.0.0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: ${{ github.ref }}
        draft: false
        prerelease: false

  # build-linux:
  #   name: Build on Linux
  #   if: contains(github.ref, 'tags/v')
  #   needs: [release]
  #   runs-on: ubuntu-latest
  #   steps:

  #   - name: üì• Checkout repository
  #     uses: actions/checkout@v2

  #   # things to be cached/restored:

  #   - name: üíæ Cache stack global package db
  #     id:   stack-global
  #     uses: actions/cache@v2
  #     with:
  #       path: ~/.stack
  #       key: ${{ runner.os }}-stack-global-${{ matrix.plan.ghc }}-${{ hashFiles('**.yaml') }}
  #       restore-keys: |
  #            ${{ runner.os }}-stack-global-${{ matrix.plan.ghc }}
  #   - name: üíæ Cache stack-installed programs in ~/.local/bin
  #     id:   stack-programs
  #     uses: actions/cache@v2
  #     with:
  #       path: ~/.local/bin
  #       key: ${{ runner.os }}-stack-programs-${{ matrix.plan.ghc }}-${{ hashFiles('**.yaml') }}
  #       restore-keys: |
  #            ${{ runner.os }}-stack-programs-${{ matrix.plan.ghc }}
  #   - name: üíæ Cache .stack-work
  #     uses: actions/cache@v2
  #     with:
  #       path: .stack-work
  #       key: ${{ runner.os }}-stack-work-${{ matrix.plan.ghc }}-${{ hashFiles('**.yaml') }}
  #       restore-keys: |
  #            ${{ runner.os }}-stack-work-${{ matrix.plan.ghc }}
  #   - name: üíæ Cache gcl/.stack-work
  #     uses: actions/cache@v2
  #     with:
  #       path: gcl/.stack-work
  #       key: ${{ runner.os }}-gcl-stack-work-${{ matrix.plan.ghc }}-${{ hashFiles('gcl/package.yaml') }}
  #       restore-keys: |
  #            ${{ runner.os }}-gcl-stack-work-${{ matrix.plan.ghc }}


  #   # actions:

  #   - name: ‚è¨ Install stack
  #     run: |
  #       mkdir -p ~/.local/bin
  #       export PATH=~/.local/bin:$PATH
  #       # curl -sL https://get.haskellstack.org/stable/linux-x86_64.tar.gz | tar xz --wildcards --strip-components=1 -C ~/.local/bin '*/stack'; chmod a+x ~/.local/bin/stack
  #       if [[ ! -x ~/.local/bin/stack ]]; then curl -sL https://get.haskellstack.org/stable/linux-x86_64.tar.gz | tar xz --wildcards --strip-components=1 -C ~/.local/bin '*/stack'; chmod a+x ~/.local/bin/stack; fi
  #       stack --version
  #   - name: ‚è¨ Install GHC
  #     run: |
  #       df -h
  #       stack setup --install-ghc
  #       df -h

  #   - name: ‚è¨ Install haskell deps
  #     run: |
  #       stack build --only-dependencies

  #   - name: üî® Build and run tests
  #     run: |
  #       stack test

    # # artifacts:

    # - name: üì¶ Install & Gather executables
    #   id: exes
    #   run: |
    #     stack install
    #     cp ~/.local/bin/gcl .
    #     zip -r gcl gcl
    #     mv gcl.zip gcl-ubuntu.zip

    # - name: üö¢ Release Artifacts
    #   uses: softprops/action-gh-release@v1
    #   if: startsWith(github.ref, 'refs/tags/')
    #   with:
    #     files: gcl-ubuntu.zip
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}